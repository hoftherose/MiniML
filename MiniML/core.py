# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/Clustering.ipynb (unless otherwise specified).

__all__ = ['Categorize', 'cat', 'plot_iris', 'k', 'it', 'data', 'centers', 'c_plot_iris']

# Cell
import torch
import pandas
import random
from fastcore.all import *

# Cell
from bokeh.plotting import figure, show
from bokeh.io import output_notebook
from bokeh.sampledata.iris import flowers

# Cell
class Categorize(Transform):
    as_item_force=False
    def __init__(self, data: pandas.core.series.Series):
        data = L(list(data)).unique()
        self.idx2val = data
        self.val2idx = data.val2idx()

    def encodes(self, idx: int): return self.idx2val[idx]

    def decodes(self, cat: str): return self.val2idx[cat]

# Cell
cat = Categorize(flowers["species"])
flowers["species_idx"] = flowers.species.map(cat.decodes)

# Cell
def plot_iris(data: pandas.core.frame.DataFrame):
    colormap = {0: 'red', 1: 'green', 2: 'blue'}
    colors = [colormap[x] for x in data['species_idx']]

    p = figure(title = "Iris Morphology")
    p.xaxis.axis_label = 'Petal Length'
    p.yaxis.axis_label = 'Petal Width'

    p.circle(data["petal_length"], data["petal_width"], color=colors, fill_alpha=0.2, size=10)

    output_notebook()

    show(p)
    return p

# Cell
k = 3
it = 100
data = torch.Tensor(flowers[flowers.columns[:4]].values)
centers = data[random.sample(range(len(data)), k)]

# Cell
def c_plot_iris(data: pandas.core.frame.DataFrame):
    colormap = {0: 'red', 1: 'green', 2: 'blue'}
    colors = [colormap[x] for x in data['species_idx']]

    source = ColumnDataSource(data)
    TOOLTIPS = [
        ("petal_length", "@petal_length"),
        ("petal_width", "@petal_width"),
        ("Correct", "@species")
    ]

    p = figure(title = "Iris Morphology", tooltips=TOOLTIPS)
    p.xaxis.axis_label = 'Petal Length'
    p.yaxis.axis_label = 'Petal Width'

    p.circle("petal_length", "petal_width", fill_alpha=0.2, size=10, source=source)

    output_notebook()

    show(p)